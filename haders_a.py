import datetime

from aiogram import Router
from aiogram.filters import CommandStart, Text, Command
from aiogram.types import Message
from keyboards_a import main_buttons, period
from posgSQL import write_users_table, write_data_table, show_categories_table, shows_history_day, shows_last_item
from service import test_in_dig, record_notes

router: Router = Router()


def main_filter(message: Message) -> bool:
    return test_in_dig(message.text)


def date_filter(message: Message) -> bool:
    if len(message.text.split("-")) == 3:
        return True


@router.message(main_filter)
async def process_start_command(message: Message):
    record_notes(message.text, message.from_user.id)
    await message.answer(text='–ü–æ–Ω—è–ª-–ø—Ä–∏–Ω—è–ª,–∑–∞–ø–æ–º–Ω–∏–ª-–∑–∞–ø–∏—Å–∞–ª!')


@router.message(CommandStart())
async def process_start_command(message: Message):
    telega_id = (message.from_user.id,)
    name = (message.from_user.username,)
    write_users_table(name=name, telega_id=telega_id)
    await message.answer(text=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å {message.from_user.username}!\n"
                              "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å ?", reply_markup=main_buttons)


@router.message(date_filter)
async def process_text_endswith_bot(message: Message):
    text = ''.join([i + '\n' for i in shows_history_day(message.text, message.from_user.id)])
    total_day = f'–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å {sum([int(i.split()[0]) for i in shows_history_day(message.text, message.from_user.id)])}'
    await message.answer(text=f'{text}\n{total_day}')


@router.message(Text('–ö–∞—Ç'))
async def process_text_endswith_bot(message: Message):
    text = ''.join([i + '\n' for i in show_categories_table()])
    await message.answer(text=text)


@router.message(Command(commands=['last']))
async def process_text_endswith_bot(message: Message):
    items = ''.join([f'{i[0]} - {i[1]}' + '\n' for i in shows_last_item(message.from_user.id)[::-1]])
    await message.answer(text=items)


@router.message(Command(commands=['help']))
async def help(message: Message):
    await message.answer(text='–ß—Ç–æ –±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω—É–∂–Ω–æ:\n'
                              '–≤–≤–µ—Å—Ç–∏ –µ–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \<—Å—É–º–º–∞\>\ \<–∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π\>\ \<–∫–∞—Ç–µ–≥–æ—Ä–∏—è\>\n'
                              '–ø—Ä–∏–º–µ—Ä\ _*200 –±–∞—Ä —É –¥—è–¥–∏ –í–∞—Å–∏ 4*_\n'
                              '—á—Ç–æ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫–∏–µ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç —Å–ª–æ–≤–æ _*\\"–ö–∞—Ç\\"*_\n'
                              '–µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –æ–Ω –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç –µ–µ –∞–≤—Ç–æ–º–∞—Ç–æ–º –Ω–∞ \'–¥—Ä—É–≥–æ–µ\' \n'
                              '–µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–∏—à–∏—Ç–µ \@krekotend',
                         parse_mode='MarkdownV2')


@router.message(Command(commands=['dice']))
async def cmd_dice_in_group(message: Message):
    await message.answer_dice(emoji="üé≤")


@router.message(Command(commands=['contacts']))
async def cmd_dice_in_group(message: Message):
    await message.answer(text='*_I will be glad to accept suggestions or wishes_*\n'
                              '||In the subject of the email\, indicate Tg\_Exchequer||\n'
                              '||Krekotend\@gmail\.com||',
                         parse_mode='MarkdownV2')


@router.message(Text('–ó–∞–ø–∏—Å–∞—Ç—å'))
async def process_entry_answer(message: Message):
    await message.answer(text='–ó–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n*—Å—É–º–º–∞  –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π  –∫–∞—Ç–µ–≥–æ—Ä–∏—è*\n'
                              '_–û—Ç–ø—Ä–∞–≤—Ç–µ –º–Ω–µ, –∞ —è –∑–∞–ø–æ–º–Ω—é _ ü§ìüßÆ ',
                         parse_mode='MarkdownV2')


@router.message(Text('–ò—Å—Ç–æ—Ä–∏—è'))
async def process_history_answer(message: Message):
    telega_id = (message.from_user.id,)
    await message.answer(text='–í—ã–±–µ—Ä–µ—Ç–∏ –ø–µ—Ä–∏–æ–¥ üëá',
                         reply_markup=period)


@router.message(Text('–°–µ–≥–æ–¥–Ω—è'))
async def shows_today(message: Message):
    day = datetime.date.today()
    text = ''.join([i + '\n' for i in shows_history_day(day, message.from_user.id)])
    total_day = f'–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å {sum([float(i.split()[0]) for i in shows_history_day(day, message.from_user.id)])}'
    await message.answer(text=f'{text}\n{total_day}', reply_markup=main_buttons)


@router.message(Text('–í—á–µ—Ä–∞'))
async def shows_today(message: Message):
    yesterday = datetime.datetime.today() - datetime.timedelta(days=1)
    text = ''.join([i + '\n' for i in shows_history_day(yesterday.date(), message.from_user.id)])
    total_day = f'–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å {sum([float(i.split()[0]) for i in shows_history_day(yesterday.date(), message.from_user.id)])}'
    await message.answer(text=f'{text}\n{total_day}', reply_markup=main_buttons)

# @router.message(Text('–ú–µ—Å—è—Ü'))
# async def shows_months(message: Message):
#     text = ''.join([i + '\n' for i in shows_history_day(, message.from_user.id)])
#     total_day = f'–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å {sum([float(i.split()[0]) for i in shows_history_day(yesterday.date(), message.from_user.id)])}'
#     await message.answer(text=f'{text}\n{total_day}', reply_markup=main_buttons)


@router.message()
async def other(message: Message):
    await message.reply(text='–ö–æ–≥–¥–∞ –ø–æ–¥—Ä—É–∂—É—Å—Ç—å —Å ChatGPT, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–π–º—É —á—Ç–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ ,'
                             ' –∞ –ø–æ–∫–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–Ω–∏–º–∞—é')
